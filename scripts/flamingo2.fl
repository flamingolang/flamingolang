class Pair {
    // constructor
    @meta fun init(a, b) {
        self.a = a
        self.b = b
    }
    // meta functions
    @meta fun displayObject() = "Pair({self.a}, {self.b})"
    @meta fun call(pair) = self.add(pair)
    @meta fun add(pair) = Pair(self, pair)
    // normal functions
    fun add(pair) {
        self.a = self.a + pair.a
        self.b = self.b + pair.b
        return self
    }
}

val pair1 = Pair(1, 2)
val pair2 = Pair(3, 4)

fun fold(collection, initial, transform) {
    var accum = initial
    for (it in collection) accum = transform.callLetting(accum=accum, it=it)
    return accum
}

class HtmlBuilder {
    @meta fun init() {
        self.private$html = []
        self.indent = 0
    }

    fun addHtml(html, end="\n") = self.private$html.add("    " * self.indent + html + end)
    fun doc(header, main, footer) {
        self.addHtml("<!DOCTYPE html>")
        self.simpleTag("html") ({
            tag("header") { self.interpretInline(header) }
            tag("main") { self.interpretInline(main) }
            tag("footer") { self.interpretInline(footer) }
        })
        return self
    }

    fun interpretInline(namespace) =
        namespace.callLetting(
            t=self.addHtml,
            tag=fun(name, namespace) = self.simpleTag(name)(namespace),
            body=self.simpleTag("body"), div=self.simpleTag("div"),
            h1=self.simpleTag("h1"), h2=self.simpleTag("h2"),
            p=self.simpleTag("p"), a=self.simpleTag("a"),
            strong=self.simpleTag("strong"), italic=self.simpleTag("italic")
        )

    fun interpret(namespace) {
        self.indent = self.indent + 1
        self.interpretInline(namespace)
        self.indent = self.indent - 1
    }

    fun simpleTag(name) {
        fun inner(namespace, cls=null, style=null) {
            cls = if (cls) " class=\"{cls}\"" else ""
            style = if (style) " style=\"{style}\"" else ""
            self.addHtml("<{name}{cls}{style}>")
            self.interpret(namespace)
            self.addHtml("</{name}>")
            return self
        }
        return inner
    }

    fun build() = fold(self.private$html, "", { accum + it })
}

class Person {
    @meta fun init(name, age) {
        self.name = name
        self.age = age
        self.bio = []
    }

    fun toString() {
        return "{self.name} ({self.age} years old)"
    }
}

class Post {
    @meta fun init(title, content) {
        self.title = title
        self.content = content
    }
}

val shaun = Person("Shaun", 20)
shaun.bio.add(Post("Creator of flamingo",
                   "Shaun created flamingo lang in kotlin"))
shaun.bio.add(Post("Oblivious",
                   "Shaun spent an hour looking for object caching that he absolutely didn't implement (he did)"))


fun builder(person) = HtmlBuilder().doc {
        // header
        tag("title") { t("{person.name} Bio") }
    } {
        // body
        h1(cls="person-name") { t("{person.name}") }
        h2 { t("{person.age} years old") }
        div(cls="bio-posts-container") {
            for (bioEntry in person.bio) {
                div {
                    p { strong { t("{bioEntry.title}") } }
                    p { t("{bioEntry.content}") }
                }
            }
        }
    } {
        // footer
        t("No rights reserved!")
    }

val shaunHTMLBuilder = builder(shaun)

val utils = import("utils").export {
    val any = any
}

import("#flamingo").export {
    val main = isMain
    val path = getPath
}
println(main(), path())
