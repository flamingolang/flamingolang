val StringConstants = import("#stringlib").constants.export {
    val GREEN = GREEN, RED = RED, RESET = RESET
}

class Assertion {
    @meta fun init(pass, error) {
        self.pass = pass
        self.error = error
    }
}

class TestResult {
    @meta fun init(test) {
        self.test = test
        self.pass = true
        self.error = null
        self.assertions = []
    }

    fun assert(value) {
        val result = value.callLettingIgnoreThrow()
        if (result.instanceOf(Throwable)) self.assertions.add(Assertion(null, result))
        else self.assertions.add(Assertion(result.meta$truthy(), null))
    }

    fun assertEquals(value, otherValue) {
        val compareValue = otherValue.callLettingIgnoreThrow()
        if (compareValue.instanceOf(Throwable)) self.assertions.add(Assertion(null, compareValue))
        else if (value == compareValue) self.assertions.add(Assertion(true, null))
        else self.assertions.add(Assertion(false, null))
    }

    fun assertIs(value, otherValue) {
        val compareValue = otherValue.callLettingIgnoreThrow()
        if (compareValue.instanceOf(Throwable)) self.assertions.add(Assertion(null, compareValue))
        else if (value is compareValue) self.assertions.add(Assertion(true, null))
        else self.assertions.add(Assertion(false, null))
    }
}


class Test {
    @meta fun init(testSuite, name, namespace) {
        self.testSuite = testSuite
        self.name = name
        self.namespace = namespace
    }

    fun perform() {
        val testResult = TestResult(self)
        val callResult =
            self.namespace.callLetting(assert=testResult.assert, assertEquals=testResult.assertEquals, assertIs=testResult.assertIs)
        if (callResult.instanceOf(Throwable))
            testResult.error = callResult
        return testResult
    }
}


class TestSuite {
    @meta fun init(name) {
        self.name = name
        self.tests = []
    }

    fun testCalled(name, namespace) = self.tests.add(Test(self, name, namespace))
    fun test(namespace) = self.testCalled(namespace.getName(), namespace)
    fun performAll() {
        println("{GREEN}=== {self.name} ({self.tests.size()}) ==={RESET}")
        var i = 0a, allFailures = 0a
        for (test in self.tests) {
            println("{GREEN}  === {test.name} ({i}/{self.tests.size()}) ==={RESET}")
            var result = test.perform(), d = 0a, failures = 0a
            for (assertion in result.assertions) {
                d.incr()
                if (assertion.error) println("    {RED}[FAIL {d}/{result.assertions.size()}]: {assertion.error.getClass().getName()}{RESET}")
                else if (assertion.pass) {
                    println("    {GREEN}[PASS {d}/{result.assertions.size()}]{RESET}")
                    continue
                } else println("    {RED}[FAIL {d}/{result.assertions.size()}]{RESET}")
                failures.incr()
            }
            allFailures.iadd(failures)
        }
    }
}
