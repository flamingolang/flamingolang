class ListReplacement(List) {
    @meta fun val init(vararg items) {
        self.items = items
    }

    @meta fun val displayObject() = "ListReplacement[{self.items.size()}]"
    @meta fun val isIterable() = true
    @meta fun val iter() = ListRepIter(self)

}

class ListRepIter {
    @meta fun val init(listReplacement) {
        self.listReplacement = listReplacement
        self.pos = 0
    }

    fun val hasNextObj() = self.pos < self.listReplacement.items.size()
    fun val nextObj() {
        item = self.listReplacement.items[self.pos]
        pos = self.pos
        self.pos = self.pos + 1
        return (self.pos)
    }
}


val l = filter(ListReplacement, [1, 2, 3, 4, 5, 6, 6]) { it.isEven() }

val testClass = classOf("testClass", arrayOf(), dictOf(meta$init=functionOf("init", ("object", ), dictOf(), { self.object = object })))

class TestClass { @meta fun init(object) { self.object = object } }


class A {
    @meta fun val init(a) {
        self.a = a
    }

    @meta fun displayObject() = "{self.getClass().getName()}({self.a})"

    fun hello() = "hello"
    fun world() = ", world"
}


class B(A) {
    @meta fun val init(a) {
        super(A, a)
    }

    fun hello() = super.hello()
    fun world() = super.world() + "!"
}

val test = @import "tests"


test.performAll()